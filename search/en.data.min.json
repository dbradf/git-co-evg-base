[{"id":0,"href":"/git-co-evg-base/concepts/criteria/","title":"Criteria","parent":"Concepts","content":"git-co-evg-base allows you to specify criteria that define what a matching evergreen version will look like.\nThere are 4 types of criteria that can be specified.\n passing tasks run tasks pass threshold run threshold  Passing tasks     Passing tasks are tasks that must have completed successfully in Evergreen to meet the criteria. They are specified with the --passing-task option. This option can be specified more than once to include multiple tasks.\nFor example, to ensure I get a revision with the following three tasks passing: auth, auth_audit, and noPassthrough, I would run the following:\ngit co-evg-base --passing-task auth --passing-task auth_audit --passing-task noPassthrough Run tasks     Run tasks are similar to passing tasks except they only need to have been executed, they do not need to have been successful. This can be useful when working on a fix for a known task failure. They are specified with the --run-task option. This option can be specified more than once to include multiple tasks.\nFor example, to ensure I get a revision with the following two tasks run: jsCore and aggregation, I would run the following:\ngit co-evg-base --run-task jsCore --run-task aggregation Pass threshold     Pass threshold ensures that some percentage of tasks in the build variants must have passed to consider the revision. This can help minimize the number of unrelated failures that might show up in patch builds. This is specified with the --pass-threshold option.\nFor example, to ensure that 85% of tasks have passed, I would run the following:\ngit co-evg-base --pass-threshold 0.85 Run threshold     Run threshold is similar to the pass threshold, but tasks only need to have been executed, they do not need to have been successful.\nFor example, to ensure that 95% of tasks have been executed, I would run the following:\ngit co-evg-base --run-threshold 0.95 Mixing criteria     More than one criteria can be applied at a time. When multiple criteria are specified, all criteria must be matched in order to consider a revision a match.\nFor example, the following run would check both the run threshold of an entire build variant and check that certain tasks pass:\ngit co-evg-base --pass-threshold 0.9 --passing-task noPassthrough --passing-task buildscripts_test "},{"id":1,"href":"/git-co-evg-base/getting-started/","title":"Getting Started","parent":"","content":"    Installation      Prerequisites      Getting Help      "},{"id":2,"href":"/git-co-evg-base/getting-started/installation/","title":"Installation","parent":"Getting Started","content":"Prerequisites      git Evergreen config file  Installation     We strongly recommend using a tool like pipx to install this tool. This will isolate the dependencies and ensure they don\u0026rsquo;t conflict with other tools.\n$ pipx install git-co-evg-base "},{"id":3,"href":"/git-co-evg-base/concepts/","title":"Concepts","parent":"","content":"    Criteria      Criteria Application      Actions      Reusing Criteria      Sharing Criteria      Limiting Search Time      "},{"id":4,"href":"/git-co-evg-base/concepts/criteria_application/","title":"Criteria Application","parent":"Concepts","content":"Applying checks to build variants     In projects with multiple build variants, you may not desire to apply the criteria to every build variant. The --build-variant option allows you to control which build variants the checks should apply. The option takes a regular expression as an argument. Any build variants that match against the regular express will have their criteria checked.\nThe --build-variant option can be specified multiple times to provide multiple regular expression to check against.\nFor example, to check that a task was successful on builds that end with \u0026ldquo;-required\u0026rdquo; and \u0026ldquo;-suggested\u0026rdquo;, I would run the following:\ngit co-evg-base --passing-task compile_dist_test --build-variant \u0026#34;.*-required\u0026#34; --build-variant \u0026#34;.*-suggested\u0026#34; Specifying the Evergreen project     By default, the mongodb-mongo-master project will be queried. This can be changed by using the --evg-project option.\nFor example, to query the mongodb-mongo-v5.0 project, I would run the following:\ngit co-evg-base --pass-threshold 0.95 --evg-project mongodb-mongo-v5.0 "},{"id":5,"href":"/git-co-evg-base/getting-started/prerequisites/","title":"Prerequisites","parent":"Getting Started","content":"Evergreen authentication     This tool needs to talk to evergreen via the evergreen api in order to function. If you have setup the evergreen command line tool as described here, everything should be setup for the tool to function.\nIf for some reason the .evergreen.yml file that contains your username and api key is not in your home directory, you will need to use the --evg-config-file option to specify the location when running the command.\n"},{"id":6,"href":"/git-co-evg-base/concepts/actions/","title":"Actions","parent":"Concepts","content":"Performing git actions when the criteria are meet     Once a revision that meets the specified criteria is found, that revision can be used to perform certain git operations. By default, a git checkout will be performed to checkout the revision in the local repository. However, the --git-operation option can be provided to change this behavior.\nThe option takes one of the following as an argument:\n checkout [default] - Perform a git checkout to checkout the found revision. rebase - Perform a git rebase to rebase changes on top of the found revision. merge - Perform a git merge to merge changes up to the found revision into the current branch. none - Take no additional actions.  Note: All actions except none will perform a git fetch origin to ensure the found revision is available locally.  For the rebase and merge operations, if any merge conflicts occur, they will be reported and the repository will be left in the unmerged state for manually resolution.\nFor the checkout option, you can specify a branch name to create on checkout with the -b or --branch option.\nFor example, to create a branch named my-branch, use the following:\ngit co-evg-base --git-operation checkout --branch my-branch Regardless of the git operation specified, the found revision will always be displayed to the screen for reference.\nExamples     Find and print a revision that meets the criteria, but perform no actions on the git repository:\ngit co-evg-base --pass-threshold 0.85 --git-operation none To rebase my active branch on the most recent commit that meets the threshold:\ngit co-evg-base --pass-threshold 0.85 --git-operation rebase Handling Evergreen modules     Evergreen modules will be handled automatically in projects that use them. When the found revision is displayed, any modules used in the project will also be displayed along with their git revision that was used in the Evergreen build.\nIf any module is locally available in the location specified by the project\u0026rsquo;s evergreen config file, the git operation performed on the base repository will also be performed on module\u0026rsquo;s repository. This allows you to ensure that the modules stay in sync with what was run in Evergreen.\nExample of a repository with modules:\ngit co-evg-base --pass-threshold 0.85 Searching mongodb-mongo-master revisions [------------------------------------] 2% Found revision: 6fe24f53eb15a29249e3042609c9bd87d5e147ec enterprise: 832db4c9f33426d5f95873e5af6916501f6701f9 wtdevelop: 186281ffe0f77518738647c0a0aae5e0d122ad33 "},{"id":7,"href":"/git-co-evg-base/getting-started/getting_help/","title":"Getting Help","parent":"Getting Started","content":"You can get a list of all the available options with the --help option.\nNote\nWhen using the --help option, you will need to call the command directly via git-co-evg-base and not execute it via git (i.e. git co-evg-base, note the space after git). This is due to a limitation in the git help system.  Additionally, there is a --verbose option that can be specified to get more detailed information about what the command is doing.\n"},{"id":8,"href":"/git-co-evg-base/project-history/","title":"Project History","parent":"","content":"    "},{"id":9,"href":"/git-co-evg-base/concepts/reusing_criteria/","title":"Reusing Criteria","parent":"Concepts","content":"Saving criteria     Instead of typing out the criteria to search for on every execution, criteria can be saved under a given name and then referenced in future executions.\nThe --save-criteria option will do this. It takes a name to save the criteria under as an argument. When the --save-criteria option is specified, the search for a revision will not occur. The criteria will only be saved.\nIf --save-criteria is run with a previously saved name, there are two possible outcomes.\n(1) If the build variants match the previously specified build variants, the command will fail and will need to be re-executed with the --override option if you want to overwrite the previous criteria.\n(2) If the build variants do not match any previous specified build variants, then the criteria will be added along with existing criteria. This allows you to specify different criteria for different build variants.\nExamples     Save a \u0026ldquo;b-grade\u0026rdquo; criteria with a pass threshold of 80% on all build variants.\ngit co-evg-base --pass-threshold 0.8 --build-variant \u0026#34;.*\u0026#34; --save-criteria b-grade Save a required criteria with a pass threshold of 95% on all required build variants and the \u0026ldquo;compile_dist_test\u0026rdquo; task passing on the \u0026ldquo;enterprise-macos\u0026rdquo; build variant.\ngit co-evg-base --pass-threshold 0.95 --build-variant \u0026#34;.*-required\u0026#34; --save-criteria required git co-evg-base --passing-task compile_dist_test --build-variant \u0026#34;^enterprise-macos$\u0026#34; --save-criteria required Using saved criteria     Once a criteria has been saved, you can use the --use-criteria option to perform a search with it. The option takes the name of the saved criteria as an argument\nExamples     To use the previously saved \u0026ldquo;required\u0026rdquo; criteria:\ngit co-evg-base --use-criteria required Seeing previously saved criteria     The --list-criteria option can be specified to output the names and rules of all previously saved criteria.\nExample     git co-evg-base --list-criteria b-grade ┏━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━┓ ┃ Build Variant Regexes ┃ Success % ┃ Run % ┃ Successful Tasks ┃ Run Tasks ┃ ┡━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━┩ │ .* │ 0.8 │ │ │ │ └───────────────────────┴───────────┴───────┴──────────────────┴───────────┘ required ┏━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━┓ ┃ Build Variant Regexes ┃ Success % ┃ Run % ┃ Successful Tasks ┃ Run Tasks ┃ ┡━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━┩ │ .*-required │ 0.95 │ │ │ │ ├───────────────────────┼───────────┼───────┼───────────────────┼───────────┤ │ ^enterprise-macos$ │ │ │ compile_dist_test │ │ └───────────────────────┴───────────┴───────┴───────────────────┴───────────┘ "},{"id":10,"href":"/git-co-evg-base/concepts/sharing_criteria/","title":"Sharing Criteria","parent":"Concepts","content":"You can use --export-criteria and --import-criteria to share criteria rules with others.\nExporting criteria rules     The --export-criteria option will export saved criteria to a file that can be shared. It takes the name of a saved criteria as a argument. The option can be specified multiple times to export multiple named criteria. The --export-file is required and takes as an argument that specified where the exported rules should be written.\nExamples     Export the previously defined rules:\ngit co-evg-base --export-criteria b-grade --export-criteria --export-file criteria.yml Importing criteria from a file     The --import-criteria option will import criteria from a file that previously exported. It takes the path to the file to import as an argument. If any of the criteria conflict with existing criteria the command will fail. Use the --override option to overwrite these conflicts.\nExamples     Import rules from an export file:\ngit co-evg-base --import-criteria criteria.yml Overwrite existing rules with rules from a export file:\ngit co-evg-base --import-criteria criteria.yml --override "},{"id":11,"href":"/git-co-evg-base/concepts/limiting_search_time/","title":"Limiting Search Time","parent":"Concepts","content":"The tool will limit how far back it will search before giving up. By default, it will look back 50 commits. This can be customized, however. There are three ways to limit how far back is searched:\n commit [default=50]: The --commit-lookback option takes an argument that specifies how many commits to search before giving up. time: The --timeout-secs option takes an argument that specifies how many seconds to search before giving up. By default, there is no limit. specific commit: The --commit-limit option takes an git commit hash for an argument once that commit is found, searching will stop.  Examples     Only look at the most recent 100 commits:\ngit co-evg-base --commit-lookback 100 Limit search to 1 minute:\ngit co-evg-base --timeout-secs 60 Only look back until commit \u0026lsquo;abc123\u0026rsquo; is found:\ngit co-evg-base --commit-limit abc123 Search until any of the above limits are hit:\ngit co-evg-base --commit-lookback 100 --timeout-secs 60 --commit-limit abc123 "},{"id":12,"href":"/git-co-evg-base/","title":"","parent":"","content":"git-co-evg-base Documentation     Find and checkout a recent git commit that matches the specified criteria.\n  \nWhen running an Evergreen patch build, it can be useful that base your changes on a commit in which the tests in Evergreen have already been run. This way if you encounter any failures in your patch build, you can easily compare the failure with what was seen in the base commit to understand if your changes may have introduced the failure.\nThis command allows you to specify criteria to use to find and checkout a git commit to start work from.\n"},{"id":13,"href":"/git-co-evg-base/categories/","title":"Categories","parent":"","content":""},{"id":14,"href":"/git-co-evg-base/tags/","title":"Tags","parent":"","content":""}]